/**********************************************************************************************************************
 * \file uart.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef UART_H_
#define UART_H_

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxAsclin_Asc.h"
#include "Ifx_Shell.h"
#include "Ifx_Console.h"
#include "IfxPort.h"
#include "IfxPort_PinMap.h"
/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
#define ISR_PRIORITY_ARDUINO_TX      8                                       /* Priority for interrupt ISR Transmit  */
#define ISR_PRIORITY_ARDUINO_RX      4                                       /* Priority for interrupt ISR Receive   */
#define ISR_PRIORITY_ARDUINO_ER      12

#define ISR_PRIORITY_RPI_TX          9
#define ISR_PRIORITY_RPI_RX          5
#define ISR_PRIORITY_RPI_ER          13

#define ISR_PRIORITY_PC_TX           10
#define ISR_PRIORITY_PC_RX           6
#define ISR_PRIORITY_PC_ER           14

#define ISR_PRIORITY_TOF_TX          11
#define ISR_PRIORITY_TOF_RX          7
#define ISR_PRIORITY_TOF_ER          15

#define UART_BUFFER_SIZE             256
#define BAUDRATE                    115200                                  /* Define the UART baud rate            */

#define FIFO_OVERHEAD    (sizeof(Ifx_Fifo) + 8)

#define TIMEOUT TIME_INFINITE
#define MSG_LENGTH_ARDUINO (sizeof(ArduinoToTc275Msg_t))

typedef enum _Channel
{
    ARDUINO = 0,
    RPI,
    PC,
    TOF
} Channel;
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
extern IfxAsclin_Asc *g_uartInstances[4];  // 0: Arduino, 1: RPi, 2: PC, 3: ToF

extern volatile uint8 g_pcTxBuf[UART_BUFFER_SIZE + FIFO_OVERHEAD];
extern volatile uint8 g_pcRxBuf[UART_BUFFER_SIZE + FIFO_OVERHEAD];

extern volatile uint8 g_arduinoTxBuf[UART_BUFFER_SIZE + FIFO_OVERHEAD];
extern volatile uint8 g_arduinoRxBuf[UART_BUFFER_SIZE + FIFO_OVERHEAD];

extern volatile uint8 g_rpiTxBuf[UART_BUFFER_SIZE + FIFO_OVERHEAD];
extern volatile uint8 g_rpiRxBuf[UART_BUFFER_SIZE + FIFO_OVERHEAD];

extern volatile uint8 g_tofTxBuf[UART_BUFFER_SIZE + FIFO_OVERHEAD];
extern volatile uint8 g_tofRxBuf[UART_BUFFER_SIZE + FIFO_OVERHEAD];

extern IfxAsclin_Asc g_uart_pc;      // ASCLIN3 -> pc debug
extern IfxAsclin_Asc g_uart_arduino; // ASCLIN0 -> arduino
extern IfxAsclin_Asc g_uart_rpi;     // ASCLIN1 -> raspberrypi
extern IfxAsclin_Asc g_uart_tof;     // ASCLIN2 -> tof

/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
 
/*********************************************************************************************************************/
/*--------------------------------------------Private Variables/Constants--------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
void initUartChannel(IfxAsclin_Asc *asc,
                     IfxAsclin_Asc_Config *cfg,
                     const IfxAsclin_Asc_Pins *pins,
                     IfxAsclin_Asc *module,
                     uint8 *txBuf, uint8 *rxBuf,
                     int channelIndex);
void init_uart_pc(void);
void init_uart_arduino(void);
void init_uart_rpi(void);
void init_uart_tof(void);
void initUART(void);


#endif /* UART_H_ */
